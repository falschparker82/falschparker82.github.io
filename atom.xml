<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hamann Distributed]]></title>
  <link href="http://distributed.hamann.se/atom.xml" rel="self"/>
  <link href="http://distributed.hamann.se/"/>
  <updated>2013-09-01T09:28:35+02:00</updated>
  <id>http://distributed.hamann.se/</id>
  <author>
    <name><![CDATA[Dominik Hamann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The horrifying state of eGovernment in Germany]]></title>
    <link href="http://distributed.hamann.se/blog/2013/08/31/the-horrifying-state-of-egovernment-in-germany/"/>
    <updated>2013-08-31T20:47:00+02:00</updated>
    <id>http://distributed.hamann.se/blog/2013/08/31/the-horrifying-state-of-egovernment-in-germany</id>
    <content type="html"><![CDATA[<p>Working and living in Berlin, one of the current major hubs for startups and innovation in Europe, I&rsquo;m used to teams of a handful of people building globally scaling platforms in just a handful of weeks with a user experience so great that I&rsquo;m almost taking it for granted.</p>

<p>A few weeks ago, I took a forced detour from the bubble.</p>

<p>Backstory: I used to freelance for smaller IT and media design gigs with my own company, but since starting to work full time in a startup, there wasn&rsquo;t much more time to do so. Because I knew German bureaucracy is quite strict on freelancers not generating profit for years in a row, I just wanted to officially dismantle my company.</p>

<p>I already knew I didn&rsquo;t want to show up in person anymore, as the respective administrative office is far away and the opening hours are plain hostile to any working person. So I googled my way around and saw that there&rsquo;s a standard form you can download, fill out and send by snail mail, together with some copies of your documents. But hey &ndash; they were also offering the <a href="http://www.berlin.de/ordnungsamt/dienstleistungen/index.php/dienstleistung/122107/">&ldquo;online treatment of the service&rdquo;</a>!</p>

<p>Being a little too curious and naïve, I clicked on the link and followed down the rabbit hole&hellip;</p>

<h4>2013-05-26, 23:10 CET:</h4>

<p>After finding the well-hidden registration link after five paragraphs of legalese and stilted introduction, I&rsquo;m able to register my first eGovernment account at EU-DLR. Yay. At least they&rsquo;re confirming my mail address, so I&rsquo;m continuing by clicking the link in the mail.</p>

<p>I&rsquo;m greeted by a notification that tells me I&rsquo;m &ldquo;accessing the site out of business hours&rdquo;.</p>

<p>Wait. What!?</p>

<p>They&rsquo;re serious. Basically everything out of standard business hours is defined by them as a &ldquo;(possible) maintenance window&rdquo;. If the server crashes, it means basically waiting till someone fixes it only the next day. (How often it actually crashed, I found out over the next days and weeks)</p>

<p>I&rsquo;m giving up for today.</p>

<h4>2013-05-27, 19:30 CET:</h4>

<p>Trying to log in again. The system immediately logs me out. Did I do a mistake? I&rsquo;m trying again, with the same result. Switching from Firefox to Chrome. Same thing. Maybe I should really &ldquo;try Internet Explorer&rdquo; as suggested? If only it wasn&rsquo;t for the fact that it&rsquo;s 2013, I&rsquo;m on OS X and Microsoft made the world a better place in 2005 already by <a href="http://en.wikipedia.org/wiki/Internet_Explorer_for_Mac">discontinuing IE for Mac</a>.</p>

<p>Before considering to use my girlfriend&rsquo;s Windows computer, I&rsquo;m trying Safari. It seems to work now.</p>

<p>I&rsquo;m &ldquo;opening my first case&rdquo;.</p>

<p>Think of everything you know about usability and user flow &ndash; and then try to imagine a site that has been specifically crafted to ignore every single best practice in the field.</p>

<p>The workflow is a seemingly never ending series of small forms that each have a &ldquo;next&rdquo; button. Every click on next lets me wait almost one minute before continuing. Somewhere in the middle of the 5th form, after 2 minutes I&rsquo;m getting back a raw, unfiltered, unstyled &ldquo;500 Internal Server Error&rdquo;. In English, that is. Fortunately I&rsquo;m only half as confused as the average German business owner using this &ldquo;service&rdquo;.</p>

<p>I can&rsquo;t reenter the site. Giving up again for today.</p>

<h4>2013-05-28</h4>

<p>I&rsquo;m discovering that there is no way to access &ldquo;my cases&rdquo; by logging into the site normally. After the standard login, there&rsquo;s no way for me to do anything else but read the FAQ. Only by clicking the link in the activation mail or typing in the correct URL, I&rsquo;m able to enter &ldquo;my case&rdquo;.</p>

<p>Insert coin and try again.</p>

<p>This time, it&rsquo;s only taking 10 seconds after each next. In one huge form, I need to enter all my data. Address, Phone number and so on. Finally, the last step in the workflow appears:</p>

<p>I&rsquo;m able to download the very form I should have sent by snail mail from the beginning &ndash; and of course, it&rsquo;s <em>NOT</em> even prefilled with all the information that I just entered.</p>

<p>Exhausted, I&rsquo;m following the instruction, printing it out, signing it, scanning it into a PDF with the standard OS X Preview app and uploading it to the &ldquo;my case&rdquo; page.</p>

<p>It&rsquo;s a pattern that&rsquo;s constantly reoccuring: Instead of taking the opportunity and simplifying online access for citizens and business owners, the process has been designed to resemble <em>the Government&rsquo;s</em> paper workflow as closely as possible, with all the bells and whistles on top that they think they need for &ldquo;secure&rdquo; interaction. Hell, they&rsquo;re even still writing all about mailings, forms and documents.</p>

<h4>2013-06-01:</h4>

<p>I&rsquo;m getting a ticket number manually assigned. Whew &ndash; something&rsquo;s moving.</p>

<h4>2013-06-04:</h4>

<p>I&rsquo;m getting a message by the system: &ldquo;There&rsquo;s a problem with your case&rdquo;. After only 10 tries, I&rsquo;m successfully logged back in again and reuploading the PDF.</p>

<h4>2013-06-08:</h4>

<p>Same thing: They can&rsquo;t read my form. Again. Apparently ISO standardized and validated PDF files are way too unstandard to be read by government agencies. To top it off, when I&rsquo;m clicking the link to my uploaded and signed form in the interface, I&rsquo;m actually <em>seeing the correct PDF document in my browser</em>. How can&rsquo;t they not see or access it? This is just frustrating. Dumb actually. I&rsquo;m done here.</p>

<h4>2013-07-24:</h4>

<p>&ldquo;Your case was closed by not answering our request&rdquo;. Yeah, whatever. Total time clocked so far: way more than 3 business hours.</p>

<h4>2013-07-29:</h4>

<p>I&rsquo;ve had enough. I&rsquo;m doing what I should have been doing all along. Printing out the business dismantling form from the very first page and a copy of my ID, signing and stamping it and sending it by snail mail. Total time clocked: 10 minutes, 55 cent postage.</p>

<p>Sidenote: This could have been for free with signed e-mail as well. I even have the new German &ldquo;electronic&rdquo; ID with signature chip and a reader (introduced in 2010), uniquely identifing me as a German citizen with full cryptographic proof.</p>

<p>However, there&rsquo;s nobody to send it to: The government agency still can&rsquo;t receive signed mails &ldquo;for technical reasons&rdquo;.</p>

<p>Never would have thought I&rsquo;d ever think of sending snail mail as easier than handling my business online.</p>

<h4>2013-08-27</h4>

<p>Having long forgotten about this major disappointment, that day I&rsquo;m coming home and there&rsquo;s registered mail in my postbox: An &ldquo;Androhungsbescheid&rdquo; (literally: &ldquo;Threatening Notification&rdquo;), telling me that if I don&rsquo;t re-upload the PDF, I&rsquo;m subject to a penalty payment of 500€.</p>

<p>Seriously?</p>

<p><em>You</em> can&rsquo;t read the most standardized document format on the planet, you provide me an interface whose only purpose is to steal my time, I&rsquo;m sending you everything by mail, you can&rsquo;t even find it and put the files on my case &ndash; and now you&rsquo;re even <em>threatening</em> me?</p>

<p>I&rsquo;ve lost it. Okay, so what to do now? The two times that companies actually made me lose my composure by extreme amounts of insolence, I immediately dealt with their press department by issuing a credible threat of massive public shaming, leveraging my former media agency. Up to now, I&rsquo;ve always won &ndash; and more.</p>

<p>This time it&rsquo;s hopeless. Researching half a night, I&rsquo;m realizing that there&rsquo;s simply nobody to complain to. There&rsquo;s a single method of complaint against people or actions of the German government, called &ldquo;Dienstaufsichtsbeschwerde&rdquo; (disciplinary complaint) that&rsquo;s commonly taught to law practitioners as &ldquo;formlos, fristlos, fruchtlos&rdquo; (informally, without notice and pointless). Everyone can write one and exactly nothing will happen. There&rsquo;s just a giant moloch that&rsquo;s refusing to move.</p>

<p>This time I&rsquo;ll just play along, reopening my case and reuploading the PDF in every image format that has ever been invented from BMP to DICOM in the hope of being accepted &ndash; and only leave this blog post as an exhausted note of protest to <em>someone</em>.</p>

<p>I&rsquo;m an IT guy with some pride and attitude left. Whoever designed this system&rsquo;s UX, technical base and business processes would immediately have been fired from any of the companies I&rsquo;ve ever worked for due to total incompetence. Who does things like this to humanity? How much do they get paid? Where&rsquo;s the accountability and common sense gone in projects like this?</p>

<p>I&rsquo;m a loss of words. There&rsquo;s only so much for me to say:</p>

<p>&ldquo;Dear German government. The best way to grow and keep the economy is to not utterly frustrate and stand in the way of the people who actually grow and keep the economy.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You probably have too much code.]]></title>
    <link href="http://distributed.hamann.se/blog/2013/06/01/you-probably-have-too-much-code/"/>
    <updated>2013-06-01T17:06:00+02:00</updated>
    <id>http://distributed.hamann.se/blog/2013/06/01/you-probably-have-too-much-code</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a recent trend in the software industry that I&rsquo;m watching with a little concern. Countless new tools for static code analysis and &ldquo;automated software review&rdquo; are popping up on the market and being in a technology leadership position at a successful startup myself, I&rsquo;m now getting pitched for this stuff on a regular basis. Even though I&rsquo;m absolutely dedicated to code quality, I&rsquo;m very skeptical at these tools &ndash; because, in my humble opinion, they are trying to solve the wrong problem. There&rsquo;s an uncomfortable truth that I&rsquo;d love to tell all companies seriously seeking to relieve their code quality pains by using these methodologies:</p>

<blockquote><p>You probably have too much code.</p></blockquote>


<p>The problem at the root of this issue is a decades-old industry focus and incentivization on <em>producing</em> code, not on taking it away. If you give a problem to a developer, there&rsquo;s a usual and deeply embedded Pavlov reflex of solving it by <em>writing</em> or <em>adding</em> code. It&rsquo;s what a software developer is paid for anyway, right?</p>

<h4>Less is more</h4>

<p>All these are signs of a dangerous culture that encourages software bloat, steadily leading to slowed software development up to a state of total unmaintainability. If you don&rsquo;t believe me, go <a href="http://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/80ba792f-5e2a-2f10-0594-89315609e177?QuickLink=index&amp;overridelayout=true&amp;55959128966099">take a look at the 3.5 gigabyte (!) binary of SAP BusinessObjects Explorer</a>. I&rsquo;ve seen so many companies grinding to a halt by throwing software layers on top of each other, that I&rsquo;ve coined a name for it: <em>Death by Abstraction</em>.</p>

<h3>Why you need less code</h3>

<h4>Less code &ndash;> less errors. Period.</h4>

<p>There are recent studies showing once and for all that the density of software errors is <a href="http://www.lsmod.de/~bernhard/cvs/text/dipl/papers/p42-basili.pdf">most strongly correlated by the number of lines in the module, <em>regardless of the language used</em></a>. Having less code makes projects stabler, leads to better test coverage and simplifies operations. It also helps to use a language that is as terse as possible (we love Coffeescript).</p>

<h4>Less I/O</h4>

<p>Code doesn&rsquo;t just have to be written &ndash; it has to be read as well. Reading and understanding code takes time, lots of it. (Paradoxically, large, complex and fragmented code bases tend to have a lot of large, complex and fragmented documentation to read on top.)</p>

<p>Time however is usually one of the most valuable and rare ressources in the software industry.</p>

<p>Having less code helps you onboarding new developers on a project and getting productive way faster, and in the same way also helps with turnover. Most importantly, it prevents complexity by &ldquo;code fear&rdquo;: If people can&rsquo;t understand other peoples&#8217; code, they tend to abstract it away. This is the exact reason monstrosities like <a href="http://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">CORBA</a> were born in the first place, feeding the code-adding cycle once again. I&rsquo;ve been in companies where projects had to be abandoned because of people being scared to touch a recently &ldquo;disappeared&rdquo; employee&rsquo;s source code. Writing less codes helps preventing such disasters in the first place.</p>

<h3>How to get and write less code</h3>

<h4>Incentivise and encourage a &ldquo;taking away&rdquo; mentality</h4>

<p>I can&rsquo;t overstate how important it is to continuously fight against the code-adding mentality itself that still resides in most developer&rsquo;s heads. Put into your core values, acceptance criteria and processes that taking code away is just as important (if not even slightly more) than writing it. Every net code line and file added is a maintenance liability.</p>

<h4>Simplify requirements</h4>

<p>If you are designing a software component to solve all of your current and future problems at once, <a href="http://en.wikipedia.org/wiki/Second-system_effect">you&rsquo;re setting yourself up for failure</a>. Solve the problem at hand and nothing more &ndash; if in doubt, <a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">you ain&rsquo;t gonna need it</a>.</p>

<p>Clearly separating your problem domain and constraints enables you powerful shortcuts. If a part of your internal tools does not need to be in the customer facing dashboard, you can save yourself half the development time by getting away without pixel-perfect design mockups, OAuth authentication, less QA, less testing&hellip; you get the idea.</p>

<p>Generalization is usually the enemy of lean software. One of the best strategies is to force yourself to generalize &ldquo;on demand&rdquo;. Start with all assumptions and shortcuts neccessary to make your life easier <em>right now</em> and follow the old adage <a href="http://c2.com/cgi/wiki?ThreeStrikesAndYouRefactor">&ldquo;One, Two, Three, Refactor&rdquo;</a>. Don&rsquo;t worry too much about &ldquo;later&rdquo; &ndash; more often than you think, you&rsquo;ll come up with an even more elegant solution anyway.</p>

<h4>Challenge frameworks, libraries and abstraction layers</h4>

<p>Separation of Concerns is incredibly important &ndash; but so is keeping a code base maintainable. Coming from a Java shop with nightmares of SOA done wrong, we had a grand vision of a one-page dashboard in Backbone and Chaplin.JS served by a fancy Collection+JSON API as Broadway.JS application on top of a Sequelize ORM.</p>

<p>In the end we saw we had so many dependencies and &ldquo;magic&rdquo; happening behind the scenes that displaying simple things from the database in the dashboard took ages in development &ndash; we realized we had made a 2013 version of the same mistakes in overengineering we were committed to not repeat. We threw out nearly everything and now use pure Backbone.JS on a lean, hand-built JSON API, tripling development efficiency.</p>

<p>Don&rsquo;t believe in hypes. Believe in simplicity.</p>

<h4>Take a step back</h4>

<p>If you regularly look at the big picture and question the compartment and component borders inside of peoples&#8217; heads, you&rsquo;ll often find that modules do duplicated work, can be merged or could be thrown away altogether. Be bold and go for it when there&rsquo;s an opportunity.</p>

<h4>Fight complexity all the way</h4>

<p>The sooner you realize that code is as much a part of the problem as a part of the solution, the sooner you can start coding less. If the solution to your problem can fit into a plain old class, don&rsquo;t encapsulate it with the newest MVC framework or instantiate an <a href="http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html">AbstractSingletonProxyFactoryBean</a> around it &ldquo;just because&rdquo;. Seriously, keep it as simple as possible &ndash; but not simpler.</p>

<p>I may be a heretic here, but if you look objectively at the <a href="http://en.wikipedia.org/wiki/Design_Patterns">Gang of Four patterns</a>, you&rsquo;ll realize that most of them were designed to lessen the pain of adding more code to a project involving many developers by <em>adding more code</em>. And that&rsquo;s okay, remember they come from an era without Git, TDD and Continuous Integration. They can be powerful at times, but they often serve as fuel for the vicious and self-serving cycle of software bloat. Use them wisely, but not for their own sake just or to look professional.</p>

<h4>Continuous Rewrite</h4>

<p>I&rsquo;m a big believer in Continuous Rewriting and it also <a href="http://www.citconf.com/wiki/index.php?title=Continuous_rewriting">seems to pick up adoption lately</a>. If instead of going all the way, you start out with a prototype that&rsquo;s <em>meant to be thrown away</em>, you achieve a lot of important goals:</p>

<ul>
<li>You free your mind from having to deliver the final solution and iterate <em>fast</em>, casually adding tests as you go.</li>
<li>You protect yourself from abstracting too much and prevent adding &ldquo;fixtures&rdquo; for possible future use.</li>
<li>You will have solved (a part of) the problem with working code and have validated the technical feasability of all aspects.</li>
<li>You learn a <em>lot</em> about the stuff that works and scales and the stuff that doesn&rsquo;t.</li>
</ul>


<p>Now if you have separated your problem domain properly and have tests for business rules, it&rsquo;s easy to take all the knowledge you&rsquo;ve gained to not just refactor and extend the component but to <em>completely rewrite it</em>, simplifying the internal design to the maximum. This way, we have rewritten our core matching component three times already &ndash; from 3000 lines of Java to 600 lines of Python to 200 lines of Coffeescript, while still adding functionality and scalability by a factor of 200.</p>

<h4>Pair programming and code reviews</h4>

<p>Pair programming and code reviews are the best tools to prevent people from reinventing the wheel, continuously update each other on best practices, simplify code and reduce clutter. Both techniques directly as well as indirectly lead to less code &ndash; they guarantee that someone else will understand and have read the code and reduce &ldquo;code fear&rdquo; by an order of magnitude. If you find you often don&rsquo;t have the time to do pair programming and code reviews, you probably should do more of it.</p>

<h3>More tips?</h3>

<p>I&rsquo;m curious, so be sure to let me know in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache invalidation made easy]]></title>
    <link href="http://distributed.hamann.se/blog/2013/05/31/cache-invalidation-made-easy/"/>
    <updated>2013-05-31T08:13:00+02:00</updated>
    <id>http://distributed.hamann.se/blog/2013/05/31/cache-invalidation-made-easy</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;There are only two hard problems in Computer Science: cache invalidation and naming things.&#8221;</p><footer><strong>Phil Karlton</strong></footer></blockquote>


<p>Full disclaimer: No, I didn&rsquo;t find the perfect solution either (guess it&rsquo;s an NP hard problem). For a lot of use cases, one of the generically applicable patterns I like best is explained very well by <a href="http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works">DHH</a> &ndash; my problem with it was that it does not cover the case when entity content changes under the very same ID. I will show you another nice and generic pattern for just this purpose for you to have another trick up your sleeve.</p>

<p>For us, the key problem was about distributed tracking applications caching metadata about the campaigns or images we&rsquo;re delivering. For example, if a campaign manager needs to change the URL, the tracking application needs to redirect to another target. As the tracking is high volume, caching was a no-brainer. For cache invalidation, we settled for a pull approach of one minute refreshes from the database first, which could unfortunately serve stale data and obviously wouldn&rsquo;t scale with growing numbers of entries and servers.</p>

<p>Now instead of custom-building something ourselves, we thought of a more generic approach &ndash; and for us, it boiled down to a dead simple convention.</p>

<h4>How it works</h4>

<p>First step, set up a messaging service. If you&rsquo;re on Amazon like us, <a href="http://aws.amazon.com/de/sns/">SNS</a> (+<a href="http://aws.amazon.com/de/sqs/">SQS</a> maybe) fits the bill perfectly and is set up in minutes, otherwise you might consider <a href="http://www.rabbitmq.com/">RabbitMQ</a> or any AMQP provider.</p>

<p>Second step, create one topic for every entity with the same name.</p>

<p>Third step, follow an easy convention:</p>

<ul>
<li>Everyone who is mutating this entity (with us, it&rsquo;s just the API, making things even easier) publishes the entity ID to the topic after writing to the database.</li>
<li>Everyone who is caching this entity subscribes to the topic and re-pulls the instance when a &ldquo;dirty&rdquo; ID comes in.</li>
</ul>


<h5>This approach is so beautiful for a lot of reasons:</h5>

<ul>
<li>Loose coupling. There are no hard dependencies between any apps following this pattern, but they all work together magically with no stale caches</li>
<li>Very easy to convert from a pull-based system</li>
<li>No to low security hassle. Data never goes through the queue, only IDs</li>
<li>Added plus for SNS users: You can safely leave the dirty work of monitoring and reliably keeping up a messaging system to Amazon.</li>
</ul>


<p>Caveat lector: Obviously this approach will probably only be viable for medium- to low-volume core and master data. For caching and invalidation at several orders of magnitude higher, you&rsquo;d probably be looking at specialized solutions and optimized modelling (Cassandra, S4 and the likes). Also, be careful as this eventually consistent solution still has some low but unknown amount of time where the cache will be stale. So if you&rsquo;re <em>absolutely dependent</em> on consistency for a problem domain, there are few other ways than disabling caching altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Careful with Cassandra upserts]]></title>
    <link href="http://distributed.hamann.se/blog/2013/05/22/careful-with-cassandra-upserts/"/>
    <updated>2013-05-22T08:13:00+02:00</updated>
    <id>http://distributed.hamann.se/blog/2013/05/22/careful-with-cassandra-upserts</id>
    <content type="html"><![CDATA[<p>A nice thing about Cassandra is the easily understandable data model: There are just upserts &ndash; an insert will automatically update / overwrite old rows. This does NOT hold true however in every case when using <em>dynamic</em> columns, as Cassandra does not have the same concept of a &ldquo;row&rdquo; as a traditional database.</p>

<p>Essentially, a Cassandra &ldquo;row&rdquo; is just a double hashmap. One layer goes to the key and says exactly <em>on which server</em> the row is, and the column key says <em>where on the server</em> the column is. This very flexible concept can lead to a problem later on though when some of the columns are different.</p>

<p>Here&rsquo;s an entry in the &ldquo;Employees&rdquo; ColumnFamily:</p>

<pre><code>employee_id: 599 (KEY)
name: "Larry Page"
age: 46
</code></pre>

<p>Now for various reasons, we have to update employee 599 with another denormalized person:</p>

<pre><code>employee_id: 599 (KEY)
name: "Sylvie Stone"
devices: ["MacBook Pro"]
</code></pre>

<p>Sylvie didn&rsquo;t tell us her age (she&rsquo;s a lady after all!) and for new employees, we&rsquo;re also tracking the devices we handed them. When we&rsquo;re upserting employee 599, a lot of people with SQL or a document-oriented database background are expecting to have the second entry in the database. That&rsquo;s not true at all unfortunately &ndash; what we will find now is this:</p>

<pre><code>employee_id: 599 (KEY)
name: "Sylvie Stone"
devices: ["MacBook Pro"]
age: 46
</code></pre>

<p>Welcome to the world of column-oriented databases &ndash; and before you think &ldquo;WTF&rdquo;, think about it for a moment. This is expected behaviour and part of Cassandra&rsquo;s &ldquo;independent columns&rdquo; paradigm. Even if it looks like it in CQL, you never actually overwrite rows &ndash; you overwrite the columns behind it.</p>

<p>So how to avoid this? You just need to model your data properly or navigate around it. As Cassandra columns are way smarter than columns in other databases, there exists a way to correct for this effect in case it&rsquo;s needed. How? Look under the hood. What Cassandra really stores is this:</p>

<pre><code>"599": [
    {name:employee_id, value:599, timestamp: 1340385863990010, ttl: 0},
    {name:name, value:"Sylvie Stone", timestamp: 1340385863990010, ttl: 0},
    {name:devices, value:["MacBook Pro"], timestamp: 1340385863990010, ttl: 0},
    {name:age, value:46, timestamp: 1340133763990010, ttl: 0}
]
</code></pre>

<p>As you&rsquo;ll have imagined, Sylvie is relieved she&rsquo;s not really 46&hellip; the entry is simply older than the rest of them, but was neither deleted nor overwritten!</p>

<p>Every decent driver for Cassandra can expose the timestamps and TTL&rsquo;s as well &ndash; and there&rsquo;s your solution to clean up the mess in the &ldquo;eventually consistent&rdquo; paradigm that the database follows: If it&rsquo;s not the same timestamp as the key, simply discard the column (you&rsquo;re free to delete it as well).</p>

<p>And don&rsquo;t worry, this added hassle in handling something that would be considered a no-brainer with more conventional databases is more than worth the flexibility gained with Cassandra&rsquo;s independent columns. More on advanced data modelling leveraging this power will follow!</p>
]]></content>
  </entry>
  
</feed>
